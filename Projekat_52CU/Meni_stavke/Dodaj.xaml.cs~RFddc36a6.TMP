using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace Projekat_52CU.Meni_stavke
{
    /// <summary>
    /// Interaction logic for Dodaj.xaml
    /// </summary>
    public partial class Dodaj : Window, INotifyPropertyChanged
    {
        public static ObservableCollection<Lokal> Lokali = new ObservableCollection<Lokal>();
        private string photoPath = "";


        #region Kolekcije [Tipovi, Etikete, Specif_alkohol, Specif_cena, Specif_kapacitet]
        private bool handle = true;
        private void ComboBox_DropDownClosed(object sender, EventArgs e)
        {
            if (handle) Handle();
            handle = true;
        }

        private void ComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            ComboBox cmb = sender as ComboBox;
            handle = !cmb.IsDropDownOpen;
            Handle();
        }

        private void Handle()
        {
            String sel_tip = cb_tip.SelectedItem.ToString();
            int i = 0;              // index za selektovani tip
            for (; i < Projekat_52CU.Tip.DodajTip.ListaTipova.Count; i++)
            {
                if (sel_tip.Equals(Projekat_52CU.Tip.DodajTip.ListaTipova[i].Oznaka))
                {
                    break;
                }
            }

            if (Projekat_52CU.Tip.DodajTip.ListaTipova[i].Slika.Equals(""))
            {
                imgPhoto.Source = new BitmapImage(new Uri("white.jpg", UriKind.Relative));
            }
            else {
                imgPhoto.Source = new BitmapImage(new Uri(Projekat_52CU.Tip.DodajTip.ListaTipova[i].Slika));
            }

            photoPath = Projekat_52CU.Tip.DodajTip.ListaTipova[i].Slika;
        }

        public ObservableCollection<string> Tipovi
        {
            get
            {
                ObservableCollection<string> tip = new ObservableCollection<string>();
                foreach (Projekat_52CU.Tip.TipLokala t in Projekat_52CU.Tip.DodajTip.ListaTipova)
                {
                    tip.Add(t.Oznaka);
                }

                return tip;
            }
            set { }
        }

        /*public ObservableCollection<string> Etikete
        {
            get
            {
                ObservableCollection<string> etiketa = new ObservableCollection<string>();
                foreach (Projekat_52CU.Etiketa.Etiketa t in Projekat_52CU.Etiketa.DodajEtiketu.ListaEtiketa)
                {
                    etiketa.Add(t.Oznaka);
                }

                return etiketa;
            }
            set { }
        }*/

        public ObservableCollection<string> Specif_alkohol      // ovo mi je lista koju stavljam u combo box u DODAJ.XAML
        {
            get;
            set;
        }
        public ObservableCollection<string> Specif_kapacitet        
        {
            get;
            set;
        }
        public ObservableCollection<string> Specif_cena
        {
            get;
            set;
        }
        #endregion

        #region PropertyChangedNotifier
        protected virtual void OnPropertyChanged(string name)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(name));
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        #endregion

        public Dodaj()
        {
            InitializeComponent();
            this.DataContext = this;
            AddElementsInList();
            BindDropDown();             // ubacujem iz liste etiketa u listBox

            #region Inicijalizacija lista [Specif_alkohol, Specif_kapacitet, Specif_cena]
            Specif_alkohol = new ObservableCollection<string>();
                Specif_alkohol.Add("Ne sluzi se");
                Specif_alkohol.Add("Sluzi se do 23h");
                Specif_alkohol.Add("Sluzi se kasno u noc");

                Specif_cena = new ObservableCollection<string>();
                Specif_cena.Add("Niske");
                Specif_cena.Add("Srednje");
                Specif_cena.Add("Visoke");
                Specif_cena.Add("Izuzetno visoke");

                Specif_kapacitet = new ObservableCollection<string>();
                Specif_kapacitet.Add("Do 50 mesta");
                Specif_kapacitet.Add("Od 50 do 100 mesta");
                Specif_kapacitet.Add("Od 100 do 250 mesta");
                Specif_kapacitet.Add("Preko 250 mesta");
            #endregion
            
            dp.SelectedDate = DateTime.Today.AddDays(0);        // selektuje danasnji dan
        }

        private void BindDropDown()
        {
            
            foreach (Projekat_52CU.Etiketa.Etiketa oznaka in Projekat_52CU.Etiketa.DodajEtiketu.ListaEtiketa)
            {
                
            }
            etikete.ItemsSource = ;
        }

        private void etikete_TextChanged(object sender, TextChangedEventArgs e)
        {
            etikete.ItemsSource = Projekat_52CU.Etiketa.DodajEtiketu.ListaEtiketa.Where(x => x.Oznaka.ToLower().StartsWith(etikete.Text.Trim().ToLower()));
        }

        private void etikete_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

        }

        private void AllCheckbocx_CheckedAndUnchecked(object sender, RoutedEventArgs e)
        {
            BindListBOX();
        }

        private void BindListBOX()
        {
            foreach (var etiketa in Projekat_52CU.Etiketa.DodajEtiketu.ListaEtiketa)
            {
                if (etiketa.Check == true)
                {
                    
                }
            }
        }

        private void AddElementsInList()
        {


            // 1 element  
            DDL_Country obj = new DDL_Country();
            obj.Country_ID = 10;
            obj.Country_Name = "India";
            objCountryList.Add(obj);
            obj = new DDL_Country();
            obj.Country_ID = 11;
            obj.Country_Name = "Pakistan";
            objCountryList.Add(obj);
            obj = new DDL_Country();
            obj.Country_ID = 12;
            obj.Country_Name = "America";
            objCountryList.Add(obj);
            obj = new DDL_Country();
            obj.Country_ID = 13;
            obj.Country_Name = "U.K";
            objCountryList.Add(obj);
            obj = new DDL_Country();
            obj.Country_ID = 14;
            obj.Country_Name = "Arab";
            objCountryList.Add(obj);
        }

        private void btnLoad_Click(object sender, RoutedEventArgs e)
        {
            OpenFileDialog op = new OpenFileDialog();
            op.Title = "Select a picture";
            op.Filter = "All supported graphics|*.jpg;*.jpeg;*.png|" +
              "JPEG (*.jpg;*.jpeg)|*.jpg;*.jpeg|" +
              "Portable Network Graphic (*.png)|*.png";
            if (op.ShowDialog() == true)
            {
                imgPhoto.Source = new BitmapImage(new Uri(op.FileName));
                photoPath = op.FileName;
            }
        }

        private void Click_Cancel(object sender, RoutedEventArgs e)
        {
            this.Hide();
        }

        private void Click_Add(object sender, RoutedEventArgs e)
        {
            Lokal lokal = new Lokal();
            lokal.Oznaka = txt_oznaka.Text;
            lokal.Ime = txt_naziv.Text;
            lokal.Opis = txt_opis.Text;
            lokal.Slika = photoPath;

            #region ComboBoxes Alkohol, Cena, Kapacitet, Tip
            /*--- ALKOHOL ---*/
            String sel_alkohol = cb_alkohol.SelectedItem.ToString();        // u Stringu vrati sta sam selektovao
            int i = 0;
            for (; i < Specif_alkohol.Count; i++)                           // prolazim kroz listu             
            {
                if (sel_alkohol.Equals(Specif_alkohol[i]))          // i poredim da li mi je ovo selektovano to nesto iz liste
                {
                    break;                                      // ako jeste, uzmem njegov index i prosledim u lokal.Alkohol
                }
            }
            lokal.Alkohol = i;

            /*--- CENA ---*/
            String sel_cena = cb_cena.SelectedItem.ToString();        
            int j = 0;
            for (; j < Specif_cena.Count; j++)
            {
                if (sel_cena.Equals(Specif_cena[j]))
                {
                    break;
                }
            }
            lokal.Cene = j;

            /*--- KAPACITET ---*/
            String sel_kap = cb_kap.SelectedItem.ToString();      
            int k = 0;
            for (; k < Specif_kapacitet.Count; k++)
            {
                if (sel_kap.Equals(Specif_kapacitet[k]))
                {
                    break;
                }
            }
            lokal.Kapacitet = k;

            /*--- TIP ---*/
            String sel_tip = cb_tip.SelectedItem.ToString();
            i = 0;              // index za selektovani tip
            for (; i < Tipovi.Count; i++)
            {
                if (sel_tip.Equals(Tipovi[i]))
                {
                    break;
                }
            }
            lokal.Tip = i;

            #endregion

            DateTime? selectedDate = dp.SelectedDate;
            string dat = "";
            if (selectedDate.HasValue)
            {
                dat = selectedDate.Value.ToString();
            }
            lokal.Datum = dat;          // kao string vracam selektovani datum

            #region CheckBoxes Pusenje, Hendikepirani, Rezervacije
            if ((bool)(chb_pusenje.IsChecked))
            {                            // .isChecked vraca bool?, koji se konvertuje u bool, pa pitam da li je to selektovano na true
                lokal.Pusenje = true;
            }
            else {
                lokal.Pusenje = false;
            }

            if ((bool)(chb_hendikepirani.IsChecked))
            {        
                lokal.Hendikepirani = true;
            }
            else
            {
                lokal.Hendikepirani = false;
            }

            if ((bool)(chb_rezervacije.IsChecked))
            {        
                lokal.Rezervacije = true;
            }
            else
            {
                lokal.Rezervacije = false;
            }
            #endregion

            string message = "Da li zelite da dodate lokal?";
            string caption = "Potvrda dodavanja";
            MessageBoxButton buttons = MessageBoxButton.YesNo;
            MessageBoxImage icon = MessageBoxImage.Question;
            if (MessageBox.Show(message, caption, buttons, icon) == MessageBoxResult.Yes)
            {
                Lokali.Add(lokal);
                this.Hide();
            }
            else
            {
                
            }


        }
    }
}
