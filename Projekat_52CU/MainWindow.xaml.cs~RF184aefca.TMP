using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Xaml;
using System.Xml.Serialization;

namespace Projekat_52CU
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window, INotifyPropertyChanged
    {
        
        /* >>> LOKAL <<<  */
        private void Dodaj_CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (Projekat_52CU.Tip.DodajTip.ListaTipova.Count == 0 || Projekat_52CU.Etiketa.DodajEtiketu.ListaEtiketa.Count == 0)
            {
                e.CanExecute = false;
            }
            else
                e.CanExecute = true;            
        }

        private void Dodaj_Executed(object sender, ExecutedRoutedEventArgs e)
        {
            var s = new Projekat_52CU.Meni_stavke.Dodaj();
            s.Show();
        }

        private void Izmeni_CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if(Projekat_52CU.Meni_stavke.Dodaj.Lokali.Count == 0)
            {
                e.CanExecute = false;
            }
            else
            {
                e.CanExecute = true;
            }
        }

        private void Izmeni_Executed(object sender, ExecutedRoutedEventArgs e)
        {
            var s = new Projekat_52CU.Meni_stavke.Izmeni();
            s.Show();
        }

        /* >>> TIP <<<  */
        private void DTip_CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            e.CanExecute = true;            
        }

        private void DTip_Executed(object sender, ExecutedRoutedEventArgs e)
        {
            var s = new Projekat_52CU.Tip.DodajTip();
            s.Show();
        }

        private void ITip_CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (Projekat_52CU.Tip.DodajTip.ListaTipova.Count == 0)
            {
                e.CanExecute = false;
            }
            else
            {
                e.CanExecute = true;
            }
        }

        private void ITip_Executed(object sender, ExecutedRoutedEventArgs e)
        {
            var s = new Projekat_52CU.Tip.IzmeniTip();
            s.Show();
            //MessageBox.Show("Ova funkcija nije implementirana", "Izrada u toku");
        }


        /* >>> ETIKETA <<<  */
        private void DEtiketu_CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            e.CanExecute = true;       
        }

        private void DEtiketu_Executed(object sender, ExecutedRoutedEventArgs e)
        {
            var s = new Projekat_52CU.Etiketa.DodajEtiketu();
            s.Show();
        }

        private void IEtiketu_CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (Projekat_52CU.Etiketa.DodajEtiketu.ListaEtiketa.Count == 0)
            {
                e.CanExecute = false;
            }
            else
            {
                e.CanExecute = true;
            }
        }

        private void IEtiketu_Executed(object sender, ExecutedRoutedEventArgs e)
        {
            var s = new Projekat_52CU.Etiketa.IzmeniEtiketu();
            s.Show();
            //MessageBox.Show("Ova funkcija nije implementirana", "Izrada u toku");
        }

        private void PrikaziTabela_CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if(Projekat_52CU.Meni_stavke.Dodaj.Lokali.Count != 0)
                e.CanExecute = true;            
            else
                e.CanExecute = false;
        }

        private void PrikaziTabela_Executed(object sender, ExecutedRoutedEventArgs e)
        {
            var s = new Projekat_52CU.Meni_stavke.PrikaziTabela();
            s.Show();
        }

        private void Dodaj_btn(object sender, RoutedEventArgs e)        // dugme na koje otvaram noi dijalog
        {
            var s = new Projekat_52CU.Dodavanje();
            s.Show();
        }

        private void Izmeni_btn(object sender, RoutedEventArgs e)        // dugme na koje otvaram noi dijalog
        {
            var s = new IzmenaPrava();
            s.Show();
        }

        private void SacuvajEtiketu_CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (Etiketa.DodajEtiketu.ListaEtiketa.Count != 0)
                e.CanExecute = true;
            else
                e.CanExecute = false;
        }

        private void SacuvajEtiketu_Executed(object sender, ExecutedRoutedEventArgs e)
        {
            string fullPath = System.IO.Path.GetFullPath("etikete.txt");
            System.IO.StreamWriter file = new System.IO.StreamWriter(fullPath);

            foreach (Etiketa.Etiketa et in Etiketa.DodajEtiketu.ListaEtiketa)
            {
                string text = et.Oznaka + "|" + et.Opis + "|" + et.Boja.ToString();
                file.WriteLine(text);
            }
            file.Close();

            MessageBox.Show("Uspesno ste sacuvali etikete!", "Sacuvaj etikete", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void UcitajEtiketu_CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            e.CanExecute = true;
        }

        private void UcitajEtiketu_Executed(object sender, ExecutedRoutedEventArgs e)
        {
            ObservableCollection<Etiketa.Etiketa> listaEtiketa = Etiketa.DodajEtiketu.ListaEtiketa;
            listaEtiketa.Clear();
            string fullPath = System.IO.Path.GetFullPath("etikete.txt");
            string[] lines = System.IO.File.ReadAllLines(fullPath);

            foreach (string line in lines)
            {
                Etiketa.Etiketa l = new Etiketa.Etiketa(line);
                listaEtiketa.Add(l);
            }

            Etiketa.DodajEtiketu.ListaEtiketa = listaEtiketa;
            MessageBox.Show("Uspesno ste ucitali etikete!", "Ucitaj etikete", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void SacuvajTipove_CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (Tip.DodajTip.ListaTipova.Count != 0)
            {
                e.CanExecute = true;
            }
            else
                e.CanExecute = false;
        }

        private void SacuvajTipove_Executed(object sender, ExecutedRoutedEventArgs e)
        {
            string fullPath = System.IO.Path.GetFullPath("tipovi.txt");
            System.IO.StreamWriter file = new System.IO.StreamWriter(fullPath);

            foreach (Tip.TipLokala t in Tip.DodajTip.ListaTipova)
            {
                string text = t.Oznaka + "|" + t.NazivTipa + "|" + t.Opis + "|" + t.Slika;
                file.WriteLine(text);
            }
            file.Close();

            MessageBox.Show("Uspesno ste sacuvali tipove lokala!", "Sacuvaj tipove lokala", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void UcitajTipove_CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            e.CanExecute = true;
        }

        private void UcitajTipove_Executed(object sender, ExecutedRoutedEventArgs e)
        {
            ObservableCollection<Tip.TipLokala> listaTipova = Tip.DodajTip.ListaTipova;
            listaTipova.Clear();
            string fullPath = System.IO.Path.GetFullPath("tipovi.txt");
            string[] lines = System.IO.File.ReadAllLines(fullPath);

            foreach (string line in lines)
            {
                Tip.TipLokala l = new Tip.TipLokala(line);
                listaTipova.Add(l);
            }

            Tip.DodajTip.ListaTipova = listaTipova;
            MessageBox.Show("Uspesno ste ucitali tipove lokala!", "Ucitaj tipove lokala", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void SacuvajLokale_CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            if (Meni_stavke.Dodaj.Lokali.Count != 0)
            {
                e.CanExecute = true;
            }
            else
                e.CanExecute = false;
        }

        private void SacuvajLokale_Executed(object sender, ExecutedRoutedEventArgs e)
        {
            /*string fullPath = System.IO.Path.GetFullPath("lokali.txt");
            System.IO.StreamWriter file = new System.IO.StreamWriter(fullPath);

            foreach (Meni_stavke.Lokal l in Meni_stavke.Dodaj.Lokali)
            {
                string text = l.Oznaka + "|" + l.Ime + "|" + l.Opis + "|" + l.Datum + "|" + l.Slika
                    + "|" + l.Alkohol + "|" + l.Cene + "|" + l.Kapacitet + "|" + l.Tip + "|" + l.Tip_string
                    
                    ;
                file.WriteLine(text);
            }
            file.Close();
            */
            MessageBox.Show("Uspesno ste sacuvali lokale!", "Sacuvaj lokale", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void UcitajLokale_CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            e.CanExecute = true;
        }

        private void UcitajLokale_Executed(object sender, ExecutedRoutedEventArgs e)
        {
            ObservableCollection<Meni_stavke.Lokal> listaLokala = Meni_stavke.Dodaj.Lokali;
            listaLokala.Clear();
            string fullPath = System.IO.Path.GetFullPath("lokali.txt");
            string[] lines = System.IO.File.ReadAllLines(fullPath);

            foreach (string line in lines)
            {
                Meni_stavke.Lokal l = new Meni_stavke.Lokal(line);
                listaLokala.Add(l);
            }

            Meni_stavke.Dodaj.Lokali = listaLokala;
            MessageBox.Show("Uspesno ste ucitali lokale!", "Ucitaj lokale", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        #region PropertyChangedNotifier
        protected virtual void OnPropertyChanged(string name)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(name));
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        #endregion

        public static string XmlSerialize<T>(this T obj) where T : class, new()
        {
            if (obj == null) throw new ArgumentNullException("obj");
            var serializer = new XmlSerializer(typeof(T));
            using (var writer = new StringWriter())
            {
                serializer.Serialize(writer, obj);
                return writer.ToString();
            }
        }


        /// <summary>Deserializes an xml string in to an object of Type T</summary>
        /// <typeparam name="T">Any class type</typeparam>
        /// <param name="xml">Xml as string to deserialize from</param>
        /// <returns>A new object of type T is successful, null if failed</returns>
        public static T XmlDeserialize<T>(this string xml) where T : class, new()
        {
            if (xml == null) throw new ArgumentNullException("xml");
            var serializer = new XmlSerializer(typeof(T));
            using (var reader = new StringReader(xml))
            {
                try { return (T)serializer.Deserialize(reader); }
                catch { return null; } // Could not be deserialized to this type.
            }
        }

    }

}
